=== Processing example.smv ===
*** This is NuSMV 2.7.0 (compiled on Thu Oct 24 17:56:00 2024)
*** Enabled addons are: compass
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Please report bugs to <Please report bugs to <nusmv-users@fbk.eu>>

*** Copyright (c) 2010-2024, Fondazione Bruno Kessler

*** This version of NuSMV is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of NuSMV is linked to the MiniSat SAT solver. 
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

********  Simulation Starting From State 1.1   ********
Trace Description: Simulation Trace 
Trace Type: Simulation 
  -> State: 1.1 <-
    a = 0
    b = 0
    c = 0
    d = 0
    x = 1
    y = 1
    a_old = 0
    b_old = 0
    c_old = 0
    d_old = 0
    x_old = 0
    y_old = 0
    n1 = 0
    n2 = 0
    n3 = 0
    n4 = 0
    state = running
    step = 0
    Sup = 10
    MaxSteps = 10
    Max = 10
  -> State: 1.2 <-
    a = 1
    b = 1
    c = 0
    d = 0
    x = 0
    y = 0
    a_old = 0
    b_old = 0
    c_old = 0
    d_old = 0
    x_old = 1
    y_old = 1
    n1 = 1
    n2 = 1
    n3 = 0
    n4 = 0
    state = running
    step = 1
    Sup = 10
    MaxSteps = 10
    Max = 10
  -> State: 1.3 <-
    a = 0
    b = 0
    c = 1
    d = 2
    x = 1
    y = 1
    a_old = 1
    b_old = 1
    c_old = 0
    d_old = 0
    x_old = 0
    y_old = 0
    n1 = 0
    n2 = 0
    n3 = 1
    n4 = 1
    state = running
    step = 2
    Sup = 10
    MaxSteps = 10
    Max = 10
  -> State: 1.4 <-
    a = 1
    b = 1
    c = 1
    d = 2
    x = 0
    y = 0
    a_old = 0
    b_old = 0
    c_old = 1
    d_old = 2
    x_old = 1
    y_old = 1
    n1 = 1
    n2 = 1
    n3 = 0
    n4 = 0
    state = running
    step = 3
    Sup = 10
    MaxSteps = 10
    Max = 10
  -> State: 1.5 <-
    a = 0
    b = 0
    c = 2
    d = 4
    x = 1
    y = 1
    a_old = 1
    b_old = 1
    c_old = 1
    d_old = 2
    x_old = 0
    y_old = 0
    n1 = 0
    n2 = 0
    n3 = 1
    n4 = 1
    state = running
    step = 4
    Sup = 10
    MaxSteps = 10
    Max = 10
  -> State: 1.6 <-
    a = 1
    b = 1
    c = 2
    d = 4
    x = 0
    y = 0
    a_old = 0
    b_old = 0
    c_old = 2
    d_old = 4
    x_old = 1
    y_old = 1
    n1 = 1
    n2 = 1
    n3 = 0
    n4 = 0
    state = running
    step = 5
    Sup = 10
    MaxSteps = 10
    Max = 10
  -> State: 1.7 <-
    a = 0
    b = 0
    c = 3
    d = 6
    x = 1
    y = 1
    a_old = 1
    b_old = 1
    c_old = 2
    d_old = 4
    x_old = 0
    y_old = 0
    n1 = 0
    n2 = 0
    n3 = 1
    n4 = 1
    state = running
    step = 6
    Sup = 10
    MaxSteps = 10
    Max = 10
  -> State: 1.8 <-
    a = 1
    b = 1
    c = 3
    d = 6
    x = 0
    y = 0
    a_old = 0
    b_old = 0
    c_old = 3
    d_old = 6
    x_old = 1
    y_old = 1
    n1 = 1
    n2 = 1
    n3 = 0
    n4 = 0
    state = running
    step = 7
    Sup = 10
    MaxSteps = 10
    Max = 10
  -> State: 1.9 <-
    a = 0
    b = 0
    c = 4
    d = 8
    x = 1
    y = 1
    a_old = 1
    b_old = 1
    c_old = 3
    d_old = 6
    x_old = 0
    y_old = 0
    n1 = 0
    n2 = 0
    n3 = 1
    n4 = 1
    state = running
    step = 8
    Sup = 10
    MaxSteps = 10
    Max = 10
  -> State: 1.10 <-
    a = 1
    b = 1
    c = 4
    d = 8
    x = 0
    y = 0
    a_old = 0
    b_old = 0
    c_old = 4
    d_old = 8
    x_old = 1
    y_old = 1
    n1 = 1
    n2 = 1
    n3 = 0
    n4 = 0
    state = running
    step = 9
    Sup = 10
    MaxSteps = 10
    Max = 10
  -> State: 1.11 <-
    a = 0
    b = 0
    c = 5
    d = 10
    x = 1
    y = 1
    a_old = 1
    b_old = 1
    c_old = 4
    d_old = 8
    x_old = 0
    y_old = 0
    n1 = 0
    n2 = 0
    n3 = 1
    n4 = 1
    state = running
    step = 10
    Sup = 10
    MaxSteps = 10
    Max = 10
-- specification  G a = b  is true
-- specification  G x = y  is true
-- specification  G (0 <= a & a <= 1)  is true
-- specification  G d mod 2 = 0  is true
-- specification  G (0 <= x & x <= 1)  is true
-- specification  G 2 * c - d = 0  is true
-- specification  G ((step > 1 & state = running) -> a = x_old)  is true
